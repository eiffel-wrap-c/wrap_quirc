note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class QUIRC_FUNCTIONS_API


feature -- Access

	quirc_version: POINTER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_version ();
			]"
		end

	quirc_new: detachable QUIRC_STRUCT_API 
		do
			if attached c_quirc_new as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	quirc_destroy (q: QUIRC_STRUCT_API) 
		do
			c_quirc_destroy (q.item)
		ensure
			instance_free: class
		end

	quirc_resize (q: QUIRC_STRUCT_API; w: INTEGER; h: INTEGER): INTEGER 
		do
			Result := c_quirc_resize (q.item, w, h)
		ensure
			instance_free: class
		end

	quirc_begin (q: QUIRC_STRUCT_API; w: POINTER; h: POINTER): POINTER 
		do
			Result := c_quirc_begin (q.item, w, h)
		ensure
			instance_free: class
		end

	quirc_end (q: QUIRC_STRUCT_API) 
		do
			c_quirc_end (q.item)
		ensure
			instance_free: class
		end

	quirc_strerror (err: INTEGER): POINTER 
		do
			Result := c_quirc_strerror (err)
		ensure
			instance_free: class
		end

	quirc_count (q: QUIRC_STRUCT_API): INTEGER 
		do
			Result := c_quirc_count (q.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_quirc_new: POINTER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_new ();
			]"
		end

	c_quirc_destroy (q: POINTER)
		external
			"C inline use <quirc.h>"
		alias
			"[
				quirc_destroy ((struct quirc*)$q);
			]"
		end

	c_quirc_resize (q: POINTER; w: INTEGER; h: INTEGER): INTEGER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_resize ((struct quirc*)$q, (int)$w, (int)$h);
			]"
		end

	c_quirc_begin (q: POINTER; w: POINTER; h: POINTER): POINTER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_begin ((struct quirc*)$q, (int*)$w, (int*)$h);
			]"
		end

	c_quirc_end (q: POINTER)
		external
			"C inline use <quirc.h>"
		alias
			"[
				quirc_end ((struct quirc*)$q);
			]"
		end

	c_quirc_strerror (err: INTEGER): POINTER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_strerror ((quirc_decode_error_t)$err);
			]"
		end

	c_quirc_count (q: POINTER): INTEGER
		external
			"C inline use <quirc.h>"
		alias
			"[
				return quirc_count ((struct quirc const*)$q);
			]"
		end

feature -- Externals Address

end
